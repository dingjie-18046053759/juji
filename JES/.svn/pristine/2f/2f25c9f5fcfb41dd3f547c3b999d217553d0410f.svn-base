package com.fmcq.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.stereotype.Service;

import com.fmcq.controller.ClientController;
import com.fmcq.entity.Client;
import com.fmcq.entity.Control;
import com.fmcq.entity.Mission;
import com.fmcq.entity.Users;
import com.fmcq.service.IClientService;
import com.fmcq.util.HibernateUtil;
import com.fmcq.util.MapUtil;
import com.fmcq.util.datautil.DateUtil2;
import com.google.gson.Gson;

/**
 * 设备
 * @author super-z
 *
 */
@Service
public class ClientServiceImpl implements IClientService {
	private static Log log = LogFactory.getLog(ClientController.class);
	
	@Resource
	private HibernateUtil util;
	
	/**
	 * 获取设备集合
	 * @return
	 */
	@Override
	public List<Object[]> findClientList(String uid){
		log.info("findClientList start");
		if(uid == null || "".equals(uid))
			return null;
		//获取用户
		Users us = this.util.get(Users.class, Integer.valueOf(uid));
		List<Object[]> list = null;
		if(us != null && us.getId() != null && us.getClients() != null && !"".equals(us.getClients())){
			String sql = "select t.* from("+
					" select id,name,area,2px,state from client where id in ("+us.getClients()+")"+
					" union all "+
					" select '','',area,1 px,'' from client where id in ("+us.getClients()+") group by area"+
					" )t"+
					" order by 3,4";
	
			list = this.util.queryBySQL(sql, false);
		}
		log.info("findClientList end");
		return list;
	}
	
	/**
	 * 获取设备信息
	 * @param id
	 * @return
	 */
	@Override
	public Client findClient(String id){
		log.info("findClient start");
		Client client = this.util.get(Client.class, Integer.valueOf(id));
		log.info("findClient end");
		return client;
	}
	
	/**
	 * 获取设备权限
	 * @param controllermodel
	 * @return
	 */
	@Override
	public List<String[]> findCmdList(String controllermodel){
		log.info("findCmdList start");
		String hql = "from Control where controllermodel='"+controllermodel+"' order by id desc";
		List<Control> list = this.util.queryHQL(hql, false);
		List<String[]> rList = new ArrayList<String[]>();
		if(list != null && list.size() > 0){
			Control control = list.get(0);
			String cmdlist = control.getCmdlist();
			if(cmdlist != null || !"".equals(cmdlist)){
				String[] cmds = cmdlist.split(";");
				String[] rcmds = null;
				for (String cmd : cmds) {
					rcmds = null;
					rcmds = cmd.split(":");
					rList.add(rcmds);
				}
			}
		}
		log.info("findCmdList end");
		return rList;
	}
	
	/**
	 * 获取设备参数
	 * @param id
	 * @return
	 */
	@Override
	public Map<String, Object> findClientInfo(String id){
		log.info("findClientInfo start");
		Client client = this.util.get(Client.class, Integer.valueOf(id));
		
		String data = client.getData();
		
		data = data.substring(data.indexOf("<d>")+3, data.indexOf("</d>"));
		
		String[] datas = data.split("&");
		
		String[] ds = null;
		String led = "";
		List<String[]> list = new ArrayList<String[]>();
		
		String zt = "";
		if("1".equals(String.valueOf(client.getState())))
			zt = "正常";
		else if("2".equals(String.valueOf(client.getState())))
			zt = "超时";
		else if("3".equals(String.valueOf(client.getState())))
			zt = "离线";
		else if("4".equals(String.valueOf(client.getState())))
			zt = "故障";
		else if("5".equals(String.valueOf(client.getState())))
			zt = "无效";
		ds = new String[2];
		ds[0] = "连接状态";
		ds[1] = zt;
		list.add(ds);
		ds = new String[2];
		ds[0] = "信息";
		ds[1] = client.getName();
		list.add(ds);
		ds = new String[2];
		ds[0] = "编号";
		ds[1] = client.getSn();
		list.add(ds);
		ds = new String[2];
		ds[0] = "类型";
		ds[1] = client.getType();
		list.add(ds);
		ds[0] = "控制器型号";
		ds[1] = client.getControllermodel();
		list.add(ds);
		ds = null;
		for (String d : datas) {
			ds = d.split("=");
			list.add(ds);
			if("led".equals(ds[0]))
				led = ","+ds[1]+",";
		}
		
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("list", list);
		map.put("id", id);
		map.put("name", client.getName());
		map.put("led", led);
		log.info("findClientInfo end");
		return map;
	}
	
	/**
	 * 发送指令
	 * @param uid
	 * @param sn
	 * @param cmd
	 * @return
	 */
	@Override
	public String upMission(String uid, String sn, String cmd){
		log.info("upMission start");
		if(uid == null || "".equals(uid))
			return MapUtil.outMap(400, "用户ID为空");
		if(uid == null || "".equals(sn))
			return MapUtil.outMap(400, "设备编号为空");
		if(uid == null || "".equals(cmd))
			return MapUtil.outMap(400, "操作指令为空");
		
		Mission m = new Mission();
		m.setSn(sn);
		m.setUid(Integer.valueOf(uid));
//		m.setCmd("c=a"+cmd);
		m.setCmd(cmd);
		m.setState(0);
		m.setTime(DateUtil2.getNow(DateUtil2.YYYY_MM_DD_HH_MM_SS));
		this.util.save(m);
		log.info("upMission end");
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("mid", m.getId());
		return MapUtil.outParameterMap("操作成功", map);
	}
	
	/**
	 * 获取指令状态
	 * @param mid
	 * @return
	 */
	@Override
	public String findMission(String mid){
		log.info("findMission start");
		
		Mission m = this.util.get(Mission.class, Integer.valueOf(mid));
		
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("state", m.getState());
		Gson g = new Gson();
		String json = g.toJson(map);
		log.info("findMission end");
		return json;
	}
	
	/**
	 * 修改指令状态
	 * @param mid
	 * @return
	 */
	@Override
	public void upMissionState(String mid){
		log.info("upMissionState start");
		Mission m = this.util.get(Mission.class, Integer.valueOf(mid));
		if("0".equals(String.valueOf(m.getState())) || "1".equals(String.valueOf(m.getState()))){
			log.info("修改指令超时");
			m.setState(4);
			this.util.save(m);
		}
		log.info("upMissionState end");
	}
}
